import socket
import optparse

## parse the command line options.
def parser():
    parser = optparse.OptionParser('usage -> %prog -H' + ' <target host> -p <target port>')
    parser.add_option('-H', dest='tgtHost', type='string', help="Specify the target.")
    parser.add_option('-p', dest='tgtPort', type="string", help="Specify the target ports.")
    (options, args) = parser.parse_args()
    tgtHost = options.tgtHost
    tgtPort = str(options.tgtPort).split(', ')
    if (tgtHost == None) | (tgtPort == None):
        print(parser.usage)
        exit(0)
    else:
        print("Trying to connect to scan for ports {0} at {1}".format(tgtPort, tgtHost))
        portScan(tgtHost, tgtPort)

## First try to get the host ip from name.
## If successfull, then get the host address from the ip
def portScan(tgtHost, tgtPort):
    try:
        tgtIp = socket.gethostbyname(tgtHost)
    except:
        print("[-] Sorry :( Cannot resolve the IP for " + tgtHost)
        return

    try:
        tgtAddress = socket.gethostbyaddr(tgtIP)
        print("[+] Started scanning for open ports at " + tgtAddress[0])
    except:
        print("[+] Scan results for : " + tgtIp)

    socket.setdefaulttimeout(1)
    
    for port in tgtPort:
        print("[+] Scanning for port : " + port)
        connScan(tgtHost, int(tgtPort))

## this func will try to create a connection, and if successfull it will print an open port msg 
def connScan(tgtHost, tgtPort):
    try:
        connSkt = socket(AF_INT, SOCK_STREAM)
        connSkt.connect((tgtHost, tgtPort))
        print("[+] %d /tcp open" % tgtPort)
        connSkt.close()
    except:
        print("[-] %d /tcp closed" % tgtPort)

parser()        
