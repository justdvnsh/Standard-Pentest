import socket
import optparse
from threading import *

## parse the command line options.
def parser():
    parser = optparse.OptionParser('usage -> %prog -H' + ' <target host> -p <target port>')
    parser.add_option('-H', dest='tgtHost', type='string', help="Specify the target.")
    parser.add_option('-p', dest='tgtPort', type="string", help="Specify the target port(s) separated by comma")
    (options, args) = parser.parse_args()
    tgtHost = options.tgtHost
    tgtPorts = str(options.tgtPort).split(',')
    if (tgtHost == None) | (tgtPorts[0] == None):
        print("Please specify the target and the port number")
        exit(0)
    else:
        portScan(tgtHost, tgtPorts)

## First try to get the host ip from name.
## If successfull, then get the host address from the ip
def portScan(tgtHost, tgtPort):
    try:
        tgtIp = socket.gethostbyname(tgtHost)
    except:
        print("[-] Sorry :( Cannot resolve the IP for " + tgtHost)
        return

    try:
        tgtAddress = socket.gethostbyaddr(tgtIP)
        print("[+] Started scanning for open ports at " + tgtAddress[0])
    except:
        print("[+] Scan results for : " + tgtIp)

    socket.setdefaulttimeout(1)
    
    for port in tgtPort:
        print("[+] Scanning for port : " + port)
        t = Thread(target = connScan, args=(tgtHost, int(port)))
        t.start()

## this func will try to create a connection, and if successfull it will print an open port msg 
screenLock = Semaphore(value=1)
def connScan(tgtHost, tgtPort):
    try:
        connSkt = socket(AF_INT, SOCK_STREAM)
        connSkt.connect((tgtHost, tgtPort))
        connSkt.send('Python is cool\r\n')
        results = connSkt.recv(1024)
        screenLock.acquire()
        connSkt.close()
        print("[+] {0} /tcp open - Service -> {1}".format(tgtPort, results))    
    except:
        screenLock.acquire()
        print("[-] %d /tcp closed" % tgtPort)
    finally:
        screenLock.release()

def main():
    parser()        


if __name__ == '__main__':
    main()


